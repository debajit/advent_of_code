* Day 6: Custom Customs

https://adventofcode.com/2020/day/6

** Part 1

*** Problem

As your flight approaches the regional airport where you'll switch to a much larger plane, customs declaration forms are distributed to the passengers.

The form asks a series of 26 yes-or-no questions marked a through z. All you need to do is identify the questions for which anyone in your group answers "yes". Since your group is just you, this doesn't take very long.

However, the person sitting next to you seems to be experiencing a language barrier and asks if you can help. For each of the people in their group, you write down the questions for which they answer "yes", one per line. For example:

#+begin_example
abcx
abcy
abcz
#+end_example

In this group, there are 6 questions to which anyone answered "yes": a, b, c, x, y, and z. (Duplicate answers to the same question don't count extra; each question counts at most once.)

Another group asks for your help, then another, and eventually you've collected answers from every group on the plane (your puzzle input). Each group's answers are separated by a blank line, and within each group, each person's answers are on a single line. For example:

#+begin_example
abc

a
b
c

ab
ac

a
a
a
a

b
#+end_example

This list represents answers from five groups:

- The first group contains one person who answered "yes" to 3 questions: a, b, and c.
- The second group contains three people; combined, they answered "yes" to 3 questions: a, b, and c.
- The third group contains two people; combined, they answered "yes" to 3 questions: a, b, and c.
- The fourth group contains four people; combined, they answered "yes" to only 1 question, a.
- The last group contains one person who answered "yes" to only 1 question, b.

In this example, the sum of these counts is ~3 + 3 + 3 + 1 + 1~ = ~11~

For each group, count the number of questions to which anyone answered "yes".
*What is the sum of those counts?*

*** Solution: Using a Set

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++17 :results verbatim
  #include <iostream>
  #include <fstream>
  #include <set>
  using namespace std;

  int main() {
      ifstream file("input");
      int sum = 0;

      while (!file.eof()) {
          string line;
          set<char> charSet;

          // Read one group’s info
          while (getline(file, line) && !line.empty()) {
              for (char c : line)
                  charSet.insert(c);
          }

          sum += charSet.size();
      }

      file.close();

      cout << "sum: " << sum << "\n";
  }
#+end_src

#+RESULTS:
: sum: 6457

**** Output

#+begin_example
6457
#+end_example

**** Notes

- This problem probably took me less time to solve than any others in Advent of Code.
- TODO: Use a map, would probably be faster.


*** Solution: Using a Hash Map

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++17 :results verbatim
  #include <iostream>
  #include <fstream>
  #include <unordered_map>
  using namespace std;

  int main() {
      ifstream file("input");
      int sum = 0;

      while (!file.eof()) {
          string line;

          // NOTE: We cannot use a vector here since multiple members of
          // a group may have answered a question (e.g. ’a’). For each
          // question that is answered, we need only track it once.
          unordered_map<char, bool> answered;

          // Read one group’s info
          while (getline(file, line) && !line.empty()) {
              for (char c : line)
                  answered[c] = true;
          }

          sum += answered.size();
      }

      file.close();

      cout << "sum: " << sum << "\n";
  }
#+end_src

#+RESULTS:
: sum: 6457

** Part 2

*** Problem

As you finish the last group's customs declaration, you notice that you misread one word in the instructions:

You don't need to identify the questions to which anyone answered "yes"; you need to identify the questions to which everyone answered "yes"!

Using the same example as above:

#+begin_example
abc

a
b
c

ab
ac

a
a
a
a

b
#+end_example

This list represents answers from five groups:

- In the first group, everyone (all 1 person) answered "yes" to 3 questions: a, b, and c.
- In the second group, there is no question to which everyone answered "yes".
- In the third group, everyone answered yes to only 1 question, a. Since some people did not answer "yes" to b or c, they don't count.
- In the fourth group, everyone answered yes to only 1 question, a.
- In the fifth group, everyone (all 1 person) answered "yes" to 1 question, b.

In this example, the sum of these counts is ~3 + 0 + 1 + 1 + 1~ = ~6~.

For each group, count the number of questions to which everyone answered "yes".
*What is the sum of those counts?*

*** Solution

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++17 :results verbatim
  #include <iostream>
  #include <fstream>
  #include <algorithm>
  using namespace std;

  int main() {
      ifstream file("input");
      int sum = 0;

      while (!file.eof()) {
          string line;

          // For each answer (a-z), we will track the count of how many
          // people answered it, in a hash map. We will also track how
          // many people there were in the group. After a group is
          // processed we can simply find the letters had an answer
          // count == number of members in the group.
          unordered_map<char, int> answerCount; // ’a’ => 5 etc
          int members = 0;

          while (getline(file, line) && !line.empty()) {
              for (char c : line)
                  ++answerCount[c];

              ++members;
          }

          for (char c = 'a'; c <= 'z'; ++c) {
              if (answerCount[c] == members) {
                  // All members in the group answered this question
                  ++sum;
              }
          }
      }

      file.close();

      cout << "sum: " << sum << "\n";
  }
#+end_src

#+RESULTS:
: sum: 3260

**** Output

#+begin_example
3260
#+end_example

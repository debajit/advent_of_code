#+TITLE:Day 1: Calorie Counting

https://adventofcode.com/2022/day/1

* Part 1

** Problem

The Elves take turns writing down the number of Calories contained by
the various meals, snacks, rations, etc. that they've brought with
them, one item per line. Each Elf separates their own inventory from
the previous Elf's inventory (if any) by a blank line.

For example, suppose the Elves finish writing their items' Calories
and end up with the following list:

#+begin_src text
  1000
  2000
  3000

  4000

  5000
  6000

  7000
  8000
  9000

  10000
#+end_src

This list represents the Calories of the food carried by five Elves:

- The first Elf is carrying food with 1000, 2000, and 3000 Calories, a
  total of 6000 Calories.

- The second Elf is carrying one food item with 4000 Calories.

- The third Elf is carrying food with 5000 and 6000 Calories, a total
  of 11000 Calories.

- The fourth Elf is carrying food with 7000, 8000, and 9000 Calories,
  a total of 24000 Calories.

- The fifth Elf is carrying one food item with 10000 Calories.

In case the Elves get hungry and need extra snacks, they need to know
which Elf to ask: they'd like to know how many Calories are being
carried by the Elf carrying the most Calories. In the example above,
this is 24000 (carried by the fourth Elf).

Find the Elf carrying the most Calories. *How many total Calories is
that Elf carrying?*


** Solution (C++)

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++20 :results verbatim
  #include <iostream>
  #include <fstream>
  #include <string>
  using namespace std;

  int findMaxCalories(const string& filename) {
      ifstream file(filename);
      string line;
      int calorieSum = 0;
      int maxCalories = 0;

      while (getline(file, line)) {
          if (!line.empty()) {
              calorieSum += stoi(line);
          }
          else {
              // Empty line. We have finished all the calorie
              // information for an elf.
              maxCalories = max(maxCalories, calorieSum);
              calorieSum = 0;     // Reset for next elf
          }
      }

      maxCalories = max(maxCalories, calorieSum);
      file.close();

      return maxCalories;
  }

  int main() {
      cout << findMaxCalories("input.txt") << "\n";
  }
#+end_src

#+RESULTS:
: 72070


* Part 2

** Problem

Instead of the max number of calories carried by any one elf, find the
sum of the top three maximum calorie counts.

** Solution (C++)

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++20 :results verbatim
  #include <iostream>
  #include <fstream>
  #include <queue>
  #include <string>
  using namespace std;

  int findTopThreeCaloriesSum(const string& filename) {
      ifstream file(filename);
      string line;
      int calorieSum = 0;
      priority_queue<int> maxHeap;

      while (getline(file, line)) {
          if (!line.empty()) {
              calorieSum += stoi(line);
          }
          else {
              // Empty line. We have finished all the calorie
              // information for an elf.
              maxHeap.push(calorieSum);
              calorieSum = 0;     // Reset for next elf
          }
      }

      maxHeap.push(calorieSum);
      file.close();

      int topThreeSum = 0;
      for (int i = 0; i < 3; ++i) {
          topThreeSum += maxHeap.top();
          maxHeap.pop();
      }

      return topThreeSum;
  }

  int main() {
      cout << findTopThreeCaloriesSum("input.txt") << "\n";
  }
#+end_src

#+RESULTS:
: 211805

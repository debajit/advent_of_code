#+TITLE:Day 4: Camp Cleanup

* Part 1

** Problem

Consider the following list of section assignment pairs:

#+begin_example
2-4,6-8
2-3,4-5
5-7,7-9
2-8,3-7
6-6,4-6
2-6,4-8
#+end_example

Visually, these pairs of section assignments look like this:

#+begin_example
.234.....  2-4
.....678.  6-8

.23......  2-3
...45....  4-5

....567..  5-7
......789  7-9

.2345678.  2-8
..34567..  3-7

.....6...  6-6
...456...  4-6

.23456...  2-6
...45678.  4-8
#+end_example

Some of the pairs have noticed that one of their assignments fully
contains the other. For example, 2-8 fully contains 3-7, and 6-6 is
fully contained by 4-6. In pairs where one assignment fully contains
the other, one Elf in the pair would be exclusively cleaning sections
their partner will already be cleaning, so these seem like the most in
need of reconsideration. In this example, there are 2 such pairs.

*In how many assignment pairs does one range fully contain the other?*


** Solution (C++). Î¸(n) time in the number of lines

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++20 :results verbatim
  #include <iostream>
  #include <fstream>
  #include <sstream>
  using namespace std;

  int intervalOverlapCount(const string& filename) {
      ifstream file(filename);
      string line;
      int start1, end1, start2, end2;
      char delim;
      int overlapCount = 0;

      // 2-3,4-5
      while(file >> start1 >> delim >> end1
                 >> delim
                 >> start2 >> delim >> end2) {
          // cout << start1 << " " << end1 << " "
          //      << start2 << " " << end2 << "\n";


          //   s1                 e1
          //   --------------------
          //        ---------
          //        s2      e2
          //
          //
          //        s1      e1
          //        ---------
          //   --------------------
          //   s2                 e2
          //
          if (start1 <= start2 && end2 <= end1 ||
              start2 <= start1 && end1 <= end2) {
              ++overlapCount;
          }
      }

      return overlapCount;
  }

  int main() {
      // cout << intervalOverlapCount("example.txt") << "\n";
      cout << intervalOverlapCount("input.txt") << "\n";
  }
#+end_src

#+RESULTS:
: 542


* Part 2

** Problem

Find the number of intervals that overlap (in general, i.e. partially or fully).

** Solution (C++)

#+begin_src C++ :includes '(<vector> <numeric> <iostream> <map>) :namespaces std :flags -std=c++20 :results verbatim
  #include <iostream>
  #include <fstream>
  #include <sstream>
  using namespace std;

  bool intervalsOverlap(int start1, int end1, int start2, int end2) {
      return !(end1 < start2 || end2 < start1);
  }

  int intervalOverlapCount(const string& filename) {
      ifstream file(filename);
      string line;
      int start1, end1, start2, end2;
      char delim;
      int overlapCount = 0;

      // 2-3,4-5
      while(file >> start1 >> delim >> end1
                 >> delim
                 >> start2 >> delim >> end2) {
          // cout << start1 << " " << end1 << " "
          //      << start2 << " " << end2 << "\n";

          // s1      e1
          // ---------
          //            ----------
          //            s2       e2
          //
          //
          //                 s1      e1
          //                 ---------
          //     ----------
          //     s2       e2
          //
          if (intervalsOverlap(start1, end1, start2, end2)) {
              ++overlapCount;
          }
      }

      return overlapCount;
  }

  int main() {
      // cout << intervalOverlapCount("example.txt") << "\n";
      cout << intervalOverlapCount("input.txt") << "\n";
  }
#+end_src

#+RESULTS:
: 900
